import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from scipy.sparse.linalg import svds

# 1?? Örnek Veri Kümesi (Etkinlikler ve Kullanýcý Puanlarý)
events = pd.DataFrame({
    'event_id': [1, 2, 3, 4, 5],
    'name': ['Ana Ocagi Projesi', 'Sifa Oyuncaklari', 'Hayata Renk Kat', 'Oyun Arkadasim', 'Down Sendromlu Cocuklara Etkinlik'],
    'description': ['Sehitlik ziyareti',
                    'Hasta cocuklara elyapimi oyuncak hediyesi',
                    'Okullarda duvar boyama',
                    'Dezavantajli cocuklarla ablalýk ve abilik',
                    'Down sendromlu bireylerle vakit gecirme']
})

ratings = pd.DataFrame({
    'user_id': [1, 1, 2, 2, 3, 3, 4, 4, 5, 5],
    'event_id': [1, 2, 2, 3, 1, 3, 4, 5, 2, 5],
    'rating': [5, 4, 5, 3, 2, 5, 4, 4, 3, 5]
})

# 2?? Ýçerik Tabanlý Filtreleme (TF-IDF + Cosine Similarity)
tfidf = TfidfVectorizer(stop_words=None)  # stop_words parametresi None olarak deðiþtirildi
tfidf_matrix = tfidf.fit_transform(events['description'])
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

def content_based_recommend(event_id, top_n=2):
    idx = events.index[events['event_id'] == event_id].tolist()[0]
    scores = list(enumerate(cosine_sim[idx]))
    scores = sorted(scores, key=lambda x: x[1], reverse=True)[1:top_n+1]
    event_indices = [i[0] for i in scores]
    return events.iloc[event_indices][['event_id', 'name']]

# 3?? Ýþbirlikçi Filtreleme (SVD ile Kullanýcý Bazlý Öneri)
user_event_matrix = ratings.pivot(index='user_id', columns='event_id', values='rating').fillna(0)
U, sigma, Vt = svds(user_event_matrix.values, k=2)
sigma = np.diag(sigma)

def collaborative_recommend(user_id, top_n=2):
    user_index = user_id - 1
    predictions = np.dot(np.dot(U[user_index, :], sigma), Vt)
    recommendations = pd.Series(predictions, index=user_event_matrix.columns)
    recommendations = recommendations.sort_values(ascending=False).head(top_n)
    return events[events['event_id'].isin(recommendations.index)][['event_id', 'name']]

# 4?? Hibrit Model: Ýçerik ve Ýþbirlikçi Filtrelemeyi Birleþtirme
def hybrid_recommend(user_id, event_id, alpha=0.5, top_n=2):
    content_rec = content_based_recommend(event_id, top_n)
    collab_rec = collaborative_recommend(user_id, top_n)
    hybrid_rec = pd.concat([content_rec, collab_rec]).drop_duplicates().head(top_n)
    return hybrid_rec

# Örnek Kullaným
print("\n?? Ýçerik Tabanlý Öneriler:")
print(content_based_recommend(2))

print("\n?? Ýþbirlikçi Filtreleme Önerileri:")
print(collaborative_recommend(1))

print("\n?? Hibrit Öneri Sistemi Sonucu:")
print(hybrid_recommend(1, 2))
